

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SIRLIS</title>
  <subtitle>sirlis</subtitle>
  <updated>2023-11-09T20:08:22+08:00</updated>
  <author>
    <name>sirlis</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 sirlis </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>如何清理 .git 文件夹来减小 github 仓库大小</title>
    <link href="http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/" rel="alternate" type="text/html" title="如何清理 .git 文件夹来减小 github 仓库大小" />
    <published>2023-09-18T13:58:19+08:00</published>
  
    <updated>2023-10-12T13:50:26+08:00</updated>
  
    <id>http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/</id>
    <content src="http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了如何在





  1. github
    
      1.1. git 命令
      1.2. github 桌面
      1.3. .git 文件夹
    
  
  2. .git 文件夹清理
    
      2.1. Linux 环境命令行清理
      2.2. 跨平台 BFG 工具清理
    
  
  3. 参考文献


1. github

1.1. git 命令

1.2. github 桌面

1.3. .git 文件夹

git 是增量更新模式，所有改动都会保存在 .git 隐藏文件夹内。

.git 文件夹清理不会把仓库中已有的文件夹和里面的内容删除，会保留最新的一次提交，并且默认最近的一次提交是干净无误的提交。

2. .git 文件夹清理

2.1. Linux 环境命令行清理

需要 Linux 环境。


  
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>在 Windows 中部署和使用 WSL 并进行跨平台 C/C++ 开发</title>
    <link href="http://localhost:4000/posts/linux-WSL/" rel="alternate" type="text/html" title="在 Windows 中部署和使用 WSL 并进行跨平台 C/C++ 开发" />
    <published>2023-09-07T15:32:19+08:00</published>
  
    <updated>2023-10-10T14:55:06+08:00</updated>
  
    <id>http://localhost:4000/posts/linux-WSL/</id>
    <content src="http://localhost:4000/posts/linux-WSL/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了如何在





  1. 什么是 WSL
    
      1.1. WSL 1 和 WSL 2
      1.2. 例外情况（使用 WSL 1 而不是 WSL 2）
    
  
  2. 安装 WSL
    
      2.1. 安装 C/C++ 开发环境依赖
      2.2. 安装 Python 开发环境依赖
        
          2.2.1. 依靠第三方安装（推荐）
          2.2.2. 在系统环境下安装
        
      
      2.3 配置 GUI 开发环境
    
  
  3. 配置 VSCode
  4. 跨系统文件存储和访问
  5. 参考文献


1. 什么是 WSL

官方文档：https://learn.microsoft.com/zh-cn/windows/wsl/

适用于 Li...
    </summary>
  

  </entry>

  
  <entry>
    <title>航天中的四元数以及姿态运动学</title>
    <link href="http://localhost:4000/posts/space-quaternion/" rel="alternate" type="text/html" title="航天中的四元数以及姿态运动学" />
    <published>2023-06-02T18:38:19+08:00</published>
  
    <updated>2023-10-10T15:02:18+08:00</updated>
  
    <id>http://localhost:4000/posts/space-quaternion/</id>
    <content src="http://localhost:4000/posts/space-quaternion/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了航天器姿态描述、姿态变换和姿态运动学中涉及的四元数表示法。






  1. 基础
    
      1.1. 矢量的正交分解
      1.2. 叉乘矩阵
      1.3. 坐标系定义
    
  
  2. 轴角旋转
  3. 姿态四元数
    
      3.1. 四元数定义
      3.2. 四元数表示旋转
      3.3. 姿态四元数
    
  
  4. 向量的坐标变换
  5. 姿态变换与四元数乘法
  6. 参考文献


1. 基础

1.1. 矢量的正交分解

对一个矢量​ $\boldsymbol{v}$ 进行沿单位参考轴 $\boldsymbol{e}$ ​正交分解为两个分量，分别为平行于 $\boldsymbol{e}$ ​的轴向分量和垂直于 $\boldsymbol{e}$ ​的垂直分量。如下图所示。



有

\...
    </summary>
  

  </entry>

  
  <entry>
    <title>使用CMake开发C++工程</title>
    <link href="http://localhost:4000/posts/c-cmake-development/" rel="alternate" type="text/html" title="使用CMake开发C++工程" />
    <published>2023-05-15T23:59:19+08:00</published>
  
    <updated>2023-11-06T23:23:20+08:00</updated>
  
    <id>http://localhost:4000/posts/c-cmake-development/</id>
    <content src="http://localhost:4000/posts/c-cmake-development/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Tutorial" />
    
    <category term="Coding" />
    
  

  
    <summary>
      





      本文介绍了使用 CMake（CPack） 和 NSIS 构建并打包 C/C++ 工程项目的基本流程和方法，核心在于 CMakeLists.txt 文件的编写。






  1. 引言
    
      1.1. 传统编译
      1.2. Make 编译
      1.3. CMake 编译
    
  
  2. 安装 CMake
  3. 编写 CMakeLists.txt
    
      3.1. 版本与编译选项配置
      3.2. 可执行程序配置
      3.3. 头文件搜索
      3.4. 源文件搜索
      3.5. 子项目（WIP）
      3.6. others（WIP）
      3.7. 生成（Generate）
      3.8. 构建（Build）
      3.9. 运行和调试（Debug）
    
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>强化学习（时序差分法）</title>
    <link href="http://localhost:4000/posts/reinforcement-learning-Temporal-Differences/" rel="alternate" type="text/html" title="强化学习（时序差分法）" />
    <published>2022-12-18T14:59:19+08:00</published>
  
    <updated>2023-11-09T20:06:44+08:00</updated>
  
    <id>http://localhost:4000/posts/reinforcement-learning-Temporal-Differences/</id>
    <content src="http://localhost:4000/posts/reinforcement-learning-Temporal-Differences/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Academic" />
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了强化学习的时序差分法（Temporal-Difference, TD）。






  1. 引言
    
      1.1. 同轨策略下的时序差分控制（SARSA）
      1.2. 离轨策略下的时序差分控制（Q-Learning）
      1.3. 期望SARSA
    
  
  2. 参考文献


1. 引言

回顾强化学习的目标：价值估计（预测问题）和策略寻优（控制问题）。在前面的的介绍中，我们分别介绍了两种基于价值的方法，动态规划法和蒙特卡洛法：


  动态规划法（DP）：是 model-based 方法，包含策略评估和策略改进两步，策略评估用来进行价值估计（即预测问题），策略改进用来进行策略寻优（控制问题）。
  蒙特卡洛法（MC）：是 model-free 方法，因为一般情况下我们无法得到具体模型（状态转移概率），因此通过采样完整序列后，通...
    </summary>
  

  </entry>

</feed>


