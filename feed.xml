

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SIRLIS</title>
  <subtitle>sirlis</subtitle>
  <updated>2024-04-11T13:13:01+08:00</updated>
  <author>
    <name>sirlis</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 sirlis </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>模式识别（统计决策方法：贝叶斯决策）</title>
    <link href="http://localhost:4000/posts/Pattern-Recognition-Bayes/" rel="alternate" type="text/html" title="模式识别（统计决策方法：贝叶斯决策）" />
    <published>2024-03-12T21:22:19+08:00</published>
  
    <updated>2024-04-11T13:12:36+08:00</updated>
  
    <id>http://localhost:4000/posts/Pattern-Recognition-Bayes/</id>
    <content src="http://localhost:4000/posts/Pattern-Recognition-Bayes/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Academic" />
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了模式识别的贝叶斯决策，包括贝叶斯公式、最小错误贝叶斯决策、最小风险贝叶斯决策。






  1. 决策理论与方法
    
      1.1. 基于先验概率的决策
      1.2. 基于贝叶斯公式的决策
    
  
  2. 最小错误贝叶斯决策
    
      2.1. 决策规则
      2.2. 类概率密度
      2.3. 错误率分析
    
  
  3. 最小风险贝叶斯决策
    
      3.1. 举例说明
      3.2. 损失函数（风险因子）
      3.3. 决策步骤
    
  
  4. 二分类错误率与ROC曲线
  5. 参考文献


1. 决策理论与方法

解决模式识别问题的方法可归纳为基于知识的方法和基于数据的方法两大类。基于数据的模式识别方法的基础时统计模式识别，即依据统计学原理建立分类器，这事模式识...
    </summary>
  

  </entry>

  
  <entry>
    <title>模式识别（线性分类器）</title>
    <link href="http://localhost:4000/posts/Pattern-Recognition-LInear-Classifier/" rel="alternate" type="text/html" title="模式识别（线性分类器）" />
    <published>2024-03-03T14:25:19+08:00</published>
  
    <updated>2024-04-10T12:51:22+08:00</updated>
  
    <id>http://localhost:4000/posts/Pattern-Recognition-LInear-Classifier/</id>
    <content src="http://localhost:4000/posts/Pattern-Recognition-LInear-Classifier/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Academic" />
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了模式识别的线性分类器，包括线性回归、最小二乘估计、Fisher 线性判别分析。






  1. 引言
  2. 线性回归与最小二乘估计
  3. Fisher 线性判别分析
    
      3.1. 投影
      3.2. Fisher 投影
    
  
  4. 参考文献


1. 引言

模式识别的目的是在特征空间中设法找到两类（或多类）之间的分界面。一方面，我们可以通过估计样本的概率模型，然后采用贝叶斯决策（最大后验估计）或者最大似然估计的策略来实现分类。但是很多情况下，建立样本的概率模型和准确估计样本的概率密度函数及其他模型参数并不是一件容易的事情。

实际上，估计概率密度函数也不是我们的目的。贝叶斯决策的策略分为两步，首先根据样本进行概率密度函数估计，然后再根据估计的概率密度函数求分类面。如果能直接根据样本求分类面，就可以省略对概率密度函数的估...
    </summary>
  

  </entry>

  
  <entry>
    <title>强化学习（策略梯度法）</title>
    <link href="http://localhost:4000/posts/reinforcement-learning-Policy-Gradient/" rel="alternate" type="text/html" title="强化学习（策略梯度法）" />
    <published>2023-11-27T16:43:19+08:00</published>
  
    <updated>2024-01-01T20:28:20+08:00</updated>
  
    <id>http://localhost:4000/posts/reinforcement-learning-Policy-Gradient/</id>
    <content src="http://localhost:4000/posts/reinforcement-learning-Policy-Gradient/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Academic" />
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了强化学习的策略梯度法（Policy Gradient）。






  1. 回顾
  2. 策略梯度
    
      2.1. 策略函数
      2.2. 策略函数的分布形式
      2.3. 策略梯度的概念
    
  
  3. 策略梯度的计算
    
      3.1. 基于累计收益的策略梯度
      3.2. 基于初始状态价值的策略梯度
      3.3. 策略梯度定理
    
  
  4. 基于策略梯度的强化学习
    
      4.1. REINFORCE
      4.2. REINFORCE with baseline
      4.3. Actor-Critic (related to V)
      4.4. Actor-Critic (related to Q)
      4.5. Advantage A...
    </summary>
  

  </entry>

  
  <entry>
    <title>如何清理 .git 文件夹来减小 github 仓库大小</title>
    <link href="http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/" rel="alternate" type="text/html" title="如何清理 .git 文件夹来减小 github 仓库大小" />
    <published>2023-09-18T13:58:19+08:00</published>
  
    <updated>2024-04-10T12:51:22+08:00</updated>
  
    <id>http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/</id>
    <content src="http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了如何清理github本地缓存文件夹来减小 github 仓库大小。





  1. github
    
      1.1. git 命令
      1.2. github 桌面
      1.3. .git 文件夹
    
  
  2. .git 文件夹清理
    
      2.1. Linux 环境命令行清理
      2.2. 跨平台 BFG 工具清理
    
  
  3. 参考文献


1. github

1.1. git 命令

1.2. github 桌面

1.3. .git 文件夹

git 是增量更新模式，所有改动都会保存在 .git 隐藏文件夹内。

.git 文件夹清理不会把仓库中已有的文件夹和里面的内容删除，会保留最新的一次提交，并且默认最近的一次提交是干净无误的提交。

2. .git 文件夹清理

2.1. Linu...
    </summary>
  

  </entry>

  
  <entry>
    <title>在 Windows 中部署和使用 WSL 并进行跨平台 C/C++ 开发</title>
    <link href="http://localhost:4000/posts/linux-WSL/" rel="alternate" type="text/html" title="在 Windows 中部署和使用 WSL 并进行跨平台 C/C++ 开发" />
    <published>2023-09-07T15:32:19+08:00</published>
  
    <updated>2024-04-10T12:51:22+08:00</updated>
  
    <id>http://localhost:4000/posts/linux-WSL/</id>
    <content src="http://localhost:4000/posts/linux-WSL/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了如何在 Windows 操作系统中适用微软官方提供的 WSL（Windows Subsystem for Linux） 工具部署 Linux 子系统。





  1. 什么是 WSL
    
      1.1. WSL 1 和 WSL 2
      1.2. 例外情况（使用 WSL 1 而不是 WSL 2）
    
  
  2. 安装 WSL
    
      2.1. 安装 C/C++ 开发环境依赖
      2.2. 安装 Python 开发环境依赖
        
          2.2.1. 依靠第三方安装（推荐）
          2.2.2. 在系统环境下安装
        
      
      2.3 配置 GUI 开发环境
    
  
  3. 配置 VSCode
  4. 跨系统文件存储和访问
  5. 参考文献

...
    </summary>
  

  </entry>

</feed>


