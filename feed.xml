

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SIRLIS</title>
  <subtitle>sirlis</subtitle>
  <updated>2023-09-18T15:13:08+08:00</updated>
  <author>
    <name>sirlis</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 sirlis </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>如何清理 .git 文件夹来减小 github 仓库大小</title>
    <link href="http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/" rel="alternate" type="text/html" title="如何清理 .git 文件夹来减小 github 仓库大小" />
    <published>2023-09-18T13:58:19+08:00</published>
  
    <updated>2023-09-18T15:12:56+08:00</updated>
  
    <id>http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/</id>
    <content src="http://localhost:4000/posts/linux-reduce-repo-size-through-git-folder/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了如何在





  1. github
    
      1.1. git 命令
      1.2. github 桌面
      1.3. .git 文件夹
    
  
  2. .git 文件夹清理
  3. 参考文献


1. github

1.1. git 命令

1.2. github 桌面

1.3. .git 文件夹

2. .git 文件夹清理

需要 Linux 环境。


  
    检查仓库是否存在未提交的更改

    如果仓库存在未提交的更改，会在后续操作中提示提示 Cannot rewrite branches: You have unstaged changes. 表明尝试重写分支时，有一些未暂存的更改。这意味着你在Git版本控制中，工作目录或者暂存区有一些更改还没有被添加到暂存区。因此，Git不能进行重写操作，因为这可能会导...
    </summary>
  

  </entry>

  
  <entry>
    <title>在 Windows 中部署和使用 WSL 并进行跨平台 C/C++ 开发</title>
    <link href="http://localhost:4000/posts/linux-WSL/" rel="alternate" type="text/html" title="在 Windows 中部署和使用 WSL 并进行跨平台 C/C++ 开发" />
    <published>2023-09-07T15:32:19+08:00</published>
  
    <updated>2023-09-18T15:06:38+08:00</updated>
  
    <id>http://localhost:4000/posts/linux-WSL/</id>
    <content src="http://localhost:4000/posts/linux-WSL/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了如何在





  1. 什么是 WSL
    
      1.1. WSL 1 和 WSL 2
      1.2. 例外情况（使用 WSL 1 而不是 WSL 2）
    
  
  2. 安装 WSL
    
      2.1. 安装 C/C++ 开发环境依赖
      2.2. 安装 Python 开发环境依赖
        
          2.2.1. 依靠第三方安装（推荐）
          2.2.2. 在系统环境下安装
        
      
    
  
  3. 配置 VSCode
  4. 跨系统文件存储和访问
  5. 参考文献


1. 什么是 WSL

官方文档：https://learn.microsoft.com/zh-cn/windows/wsl/

适用于 Linux 的 Windows 子系统 (WSL...
    </summary>
  

  </entry>

  
  <entry>
    <title>航天中的四元数以及姿态运动学</title>
    <link href="http://localhost:4000/posts/space-quaternion/" rel="alternate" type="text/html" title="航天中的四元数以及姿态运动学" />
    <published>2023-06-02T18:38:19+08:00</published>
  
    <updated>2023-09-01T22:48:09+08:00</updated>
  
    <id>http://localhost:4000/posts/space-quaternion/</id>
    <content src="http://localhost:4000/posts/space-quaternion/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了航天器姿态描述、姿态变换和姿态运动学中涉及的四元数表示法。






  1. 基础
    
      1.1. 矢量的正交分解
      1.2. 叉乘矩阵
      1.3. 坐标系定义
    
  
  2. 轴角旋转
  3. 姿态四元数
    
      3.1. 四元数定义
      3.2. 四元数表示旋转
      3.3. 姿态四元数
    
  
  4. 向量的坐标变换
  5. 姿态变换与四元数乘法
  6. 参考文献


1. 基础

1.1. 矢量的正交分解

对一个矢量​ $\boldsymbol{v}$ 进行沿单位参考轴 $\boldsymbol{e}$ ​正交分解为两个分量，分别为平行于 $\boldsymbol{e}$ ​的轴向分量和垂直于 $\boldsymbol{e}$ ​的垂直分量。如下图所示。



有

\...
    </summary>
  

  </entry>

  
  <entry>
    <title>Windows环境下使用MinGW-W64、CMake和NSIS打包C++工程</title>
    <link href="http://localhost:4000/posts/c-mingw64-compile-build-pack-with-cmake-nsis/" rel="alternate" type="text/html" title="Windows环境下使用MinGW-W64、CMake和NSIS打包C++工程" />
    <published>2023-05-15T23:59:19+08:00</published>
  
    <updated>2023-05-15T23:59:19+08:00</updated>
  
    <id>http://localhost:4000/posts/c-mingw64-compile-build-pack-with-cmake-nsis/</id>
    <content src="http://localhost:4000/posts/c-mingw64-compile-build-pack-with-cmake-nsis/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Tutorial" />
    
    <category term="Coding" />
    
  

  
    <summary>
      





      本文介绍了 Windows 环境下使用 CMake（CPack） 和 NSIS 构建并打包 C/C++ 工程项目的基本流程和方法，核心在于 CMakeLists.txt 文件的编写。






  1. 引言
  2. CMake 配置
    
      2.1. 环境搭建
      2.2. 配置（Configure）
      2.3. 生成（Generate）
      2.4. 构建（Build）
      2.5. 运行和调试（Debug）
    
  
  3. 基于 CMake 的打包
    
      3.1. CPack
      3.2. NSIS
      3.3. 基于 CPack 和 NSIS 的打包
    
  
  4. 参考文献


1. 引言

前面我们介绍了在VSCode中采用MinGW-W64作为C/C++的编译器来进行...
    </summary>
  

  </entry>

  
  <entry>
    <title>强化学习（时序差分法）</title>
    <link href="http://localhost:4000/posts/reinforcement-learning-Temporal-Differences/" rel="alternate" type="text/html" title="强化学习（时序差分法）" />
    <published>2022-12-18T14:59:19+08:00</published>
  
    <updated>2022-12-18T14:59:19+08:00</updated>
  
    <id>http://localhost:4000/posts/reinforcement-learning-Temporal-Differences/</id>
    <content src="http://localhost:4000/posts/reinforcement-learning-Temporal-Differences/" />
    <author>
      <name>sirlis</name>
    </author>

  
    
    <category term="Academic" />
    
    <category term="Knowledge" />
    
  

  
    <summary>
      





      本文介绍了强化学习的时序差分法（Temporal-Difference, TD）。






  1. 引言
    
      1.1. 同轨策略下的时序差分控制（SARSA）
      1.2. 离轨策略下的时序差分控制（Q-Learning）
      1.3. 期望SARSA
    
  
  2. 参考文献


1. 引言

回顾强化学习的目标：价值估计（预测问题）和策略寻优（控制问题）。在前面的的介绍中，我们分别介绍了两种基于价值的方法，动态规划法和蒙特卡洛法：


  动态规划法（DP）：是 model-based 方法，包含策略评估和策略改进两步，策略评估用来进行价值估计（即预测问题），策略改进用来进行策略寻优（控制问题）。
  蒙特卡洛法（MC）：是 model-free 方法，因为一般情况下我们无法得到具体模型（状态转移概率），因此通过采样完整序列后，通...
    </summary>
  

  </entry>

</feed>


