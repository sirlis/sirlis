name: "Build and Deploy"
on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - .gitignore
      - README.md
      - LICENSE

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
          # If using the 'assets' git submodule from Chirpy Starter, uncomment above
          # (See: https://github.com/cotes2020/chirpy-starter/tree/main/assets)

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3   # reads from a '.ruby-version' or '.tools-version' file if 'ruby-version' is omitted
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Build site
        # run: bundle exec jekyll b -d "_site${{ steps.pages.outputs.base_path }}"
        run: |
          npm install --global yarn
          yarn install
          yarn build
          bundle update
          JEKYLL_ENV=production bundle exec jekyll b -d "_site${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: "production"

      - name: Test site
        run: |
          bundle exec htmlproofer _site --disable-external --check-html --allow_hash_href

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "_site${{ steps.pages.outputs.base_path }}"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
  
  # sync github repos to gitee (currently done when push sirlis.github.io)
  # private key at 'C:\Users\Administrator\.ssh\id_rsa' and saved in github/repo/settings/secrets as GITEE_PRIVATE_KEY
  # token at 'C:\Users\Administrator\.ssh\gitee_token.txt' and saved in github/repo/settings/secrets as GITEE_TOKEN
  syncgitee:
    needs: [build, deploy]
    steps:
      - name: Mirror the Github organization repos to Gitee.
        uses: Yikun/hub-mirror-action@master
        with:
          src: github/sirlis
          dst: gitee/sirlis
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
          dst_token: ${{ secrets.GITEE_TOKEN }}
          white_list: "sirlis.github.io,digital-spacecraft-simulator,digital-spacecraft-scene"
          black_list: "FuzzySeg,RailDefect"
          # account_type: org
          # src_account_type: org
          # dst_account_type: org